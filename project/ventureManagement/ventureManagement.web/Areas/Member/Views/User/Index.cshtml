@{
    ViewBag.Title = "用户管理";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section headtag
{
    <script>
        /* A header Checkbox of CheckboxSelectionModel deals with the current page only.
           This override demonstrates how to take into account all the pages.
           It works with local paging only. It is not going to work with remote paging.
        */
        Ext.selection.CheckboxModel.override({
            selectAll: function(suppressEvent) {
                var me = this,
                    selections = me.store.getAllRange(), // instead of the getRange call
                    i = 0,
                    len = selections.length,
                    start = me.getSelection().length;

                me.suspendChanges();

                for (; i < len; i++) {
                    me.doSelect(selections[i], true, suppressEvent);
                }

                me.resumeChanges();
                if (!suppressEvent) {
                    me.maybeFireSelectionChange(me.getSelection().length !== start);
                }
            },

            deselectAll: Ext.Function.createSequence(Ext.selection.CheckboxModel.prototype.deselectAll, function() {
                this.view.panel.getSelectionMemory().clearMemory();
            }),

            updateHeaderState: function() {
                var me = this,
                    store = me.store,
                    storeCount = store.getTotalCount(),
                    views = me.views,
                    hdSelectStatus = false,
                    selectedCount = 0,
                    selected,
                    len,
                    i;

                if (!store.buffered && storeCount > 0) {
                    selected = me.view.panel.getSelectionMemory().selectedIds;
                    hdSelectStatus = true;
                    for (s in selected) {
                        ++selectedCount;
                    }

                    hdSelectStatus = storeCount === selectedCount;
                }

                if (views && views.length) {
                    me.toggleUiHeader(hdSelectStatus);
                }
            }
        });

        Ext.grid.plugin.SelectionMemory.override({
            memoryRestoreState: function(records) {
                if (this.store !== null && !this.store.buffered && !this.grid.view.bufferedRenderer) {
                    var i = 0,
                        ind,
                        sel = [],
                        len,
                        all = true,
                        cm = this.headerCt;

                    if (!records) {
                        records = this.store.getAllRange(); // instead of getRange
                    }

                    if (!Ext.isArray(records)) {
                        records = [records];
                    }

                    if (this.selModel.isLocked()) {
                        this.wasLocked = true;
                        this.selModel.setLocked(false);
                    }

                    if (this.selModel instanceof Ext.selection.RowModel) {
                        for (ind = 0, len = records.length; ind < len; ind++) {
                            var rec = records[ind],
                                id = rec.getId();

                            if ((id || id === 0) && !Ext.isEmpty(this.selectedIds[id])) {
                                sel.push(rec);
                            } else {
                                all = false;
                            }

                            ++i;
                        }

                        if (sel.length > 0) {
                            this.surpressDeselection = true;
                            this.selModel.select(sel, false, !this.grid.selectionMemoryEvents);
                            this.surpressDeselection = false;
                        }
                    } else {
                        for (ind = 0, len = records.length; ind < len; ind++) {
                            var rec = records[ind],
                                id = rec.getId();

                            if ((id || id === 0) && !Ext.isEmpty(this.selectedIds[id])) {
                                if (this.selectedIds[id].dataIndex) {
                                    var colIndex = cm.getHeaderIndex(cm.down('gridcolumn[dataIndex=' + this.selectedIds[id].dataIndex + ']'))
                                    this.selModel.setCurrentPosition({
                                        row: i,
                                        column: colIndex
                                    });
                                }
                                return false;
                            }

                            ++i;
                        }
                    }

                    if (this.selModel instanceof Ext.selection.CheckboxModel) {
                        if (all) {
                            this.selModel.toggleUiHeader(true);
                        } else {
                            this.selModel.toggleUiHeader(false);
                        }
                    }

                    if (this.wasLocked) {
                        this.selModel.setLocked(true);
                    }
                }
            }
        });

        var template = 'color:{0};';

        var emptyCheck = function(value, meta) {
            meta.style = Ext.String.format(template, (value === "") ? "green" : "red");
            if (value === "")
                value = "不能为空";
            return value;
        };

        var change = function(value, meta) {
            meta.style = Ext.String.format(template, (value > 0) ? "green" : "red");
            return value;
        };

        var beforeEdit = function(editor, e) {
            if (e.field !== "DisplayName" && e.filed !== "Email" && e.filed !== "Status" &&
                e.field !== "Status")
                return false;
        }

        var edit = function(editor, e) {
            /*
                "e" is an edit event with the following properties:

                    grid - The grid
                    record - The record that was edited
                    field - The field name that was edited
                    value - The value being set
                    originalValue - The original value for the field, before the edit.
                    row - The grid table row
                    column - The grid Column defining the column that was edited.
                    rowIdx - The row index that was edited
                    colIdx - The column index that was edited
            */

            // Call DirectMethod
            if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Edit"))',
                    params: {
                        id: e.record.data.UserId,
                        field: e.field,
                        oldValue: e.originalValue,
                        newValue: e.value,
                        customer: e.record.data
                    }
                });
            }
        };


        var addRecord = function(grid) {
            var r = Ext.create({
                Status: "已验证"
            });
            grid.store.insert(0, r);
            form.getForm().reset();
        };
    </script>
}

    

@section menu
{
    @(
        X.GridPanel()
            .Title("用户列表")
            .ID("UserGrid")
            .Frame(true)
            .Height(400)
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        Html.X().Button()
                            .Text("保存")
                            .Icon(Icon.Disk)
                            .DirectEvents(de =>
                            {
                                de.Click.Url = Url.Action("UpdateUsers");
                                de.Click.ExtraParams.Add(new Parameter
                                {
                                    Name = "data",
                                    Value = "this.up('grid').store.getChangedData()",
                                    Mode = ParameterMode.Raw,
                                    Encode = true
                                });
                            }),
                            
                        Html.X().Button()
                            .Text("增加")
                            .Icon(Icon.UserAdd)
                            .Handler("addRecord(App.UserGrid);"),
                            
                        Html.X().Button()
                            .Text("删除")
                            .Icon(Icon.UserAdd)
                            .Handler("this.up('grid').deleteSelected(); App.UserForm.getForm().reset();")
                        )
                    )
            .Store(
                Html.X().Store()
                    .ID("UserGridStore")
                    .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("Read"))
                        .Reader(Html.X().JsonReader().Root("data"))
                    )
                    .RemoteSort(true)
                    .PageSize(15)
                    .Model(
                            Html.X().Model()
                                .IDProperty("UserId")
                                .Fields(
                                    Html.X().ModelField().Name("UserId"),
                                    Html.X().ModelField().Name("UserName"),
                                    Html.X().ModelField().Name("DisplayName"),
                                    Html.X().ModelField().Name("Email"),
                                    Html.X().ModelField().Name("Mobile"),
                                    Html.X().ModelField().Name("RegistrationTime").Type(ModelFieldType.Date),
                                    Html.X().ModelField().Name("LoginTime").Type(ModelFieldType.Date),
                                    Html.X().ModelField().Name("LoginIP"),
                                    Html.X().ModelField().Name("Status")
                                )
                            )
                    )
                    
            .ColumnModel(
                Html.X().Column().DataIndex("UserId").Text("Id").Hidden(true),
                Html.X().ComponentColumn().DataIndex("UserName").Text("用户名").EmptyCellText("不能为空")
                    .OverOnly(true).Editor(true).Component(Html.X().TextField()
                    .AllowBlank(false).EmptyText("用户名最少五个字")),
                Html.X().ComponentColumn().DataIndex("DisplayName").Text("昵称")
                    .OverOnly(true).Editor(true).Component(Html.X().TextField()),
                    Html.X().ComponentColumn().DataIndex("Email").Text("Email").EmptyCellText("不能为空")
                    .OverOnly(true).Editor(true).Component(Html.X().TextField()
                        .AllowBlank(false).StandardVtype(ValidationType.Email)),
                Html.X().ComponentColumn().DataIndex("Mobile").Text("手机号").EmptyCellText("不能为空")
                    .OverOnly(true).Editor(true).Component(Html.X().TextField()
                        .AllowBlank(false).StandardVtype(ValidationType.AlphaNum)),
                Html.X().DateColumn().DataIndex("RegistrationTime").Text("注册时间").Format("yyyy-MM-dd"),
                Html.X().DateColumn().DataIndex("LoginTime").Text("最近登录时间").Format("yyyy-MM-dd"),
                Html.X().Column().DataIndex("LoginIP").Text("最近登录的IP"),
                Html.X().ComponentColumn().DataIndex("Status").Text("状态")
                    .UnpinEvents("collapse").PinEvents("expand")
                    .OverOnly(true).Editor(true).Component(Html.X().ComboBox()
                        .Items(
                                    new ListItem("未验证"),
                                    new ListItem("管理员未确认"),
                                    new ListItem("锁定"),
                                    new ListItem("已验证")
                                )
                    ))
                    
            .Plugins(
                    X.FilterHeader()
                )
            .Listeners(l =>
                {
                    l.AfterRender.Handler = "this.filterHeader.fields[0].setIconCls('#Magnifier')";
                    l.AfterRender.Delay = 10;
                })
            .SelectionModel(
                X.CheckboxSelectionModel()                
                .Mode(SelectionMode.Multi)
            )
                
            .BottomBar(
                Html.X().PagingToolbar()
                    .BeforePageText("页")
                    .AfterPageText("第{0}页")
                    .DisplayInfo(true)
                    .DisplayMsg("显示用户 {0} - {1} 共 {2}")
                    .EmptyMsg("没有用户"))
    )
}