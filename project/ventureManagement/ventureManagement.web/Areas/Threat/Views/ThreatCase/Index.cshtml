@using Ext.Net
@using Ext.Net.MVC
@{
    ViewBag.Title = "隐患预警管理";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section headtag
{
    <script>
        var template = 'color:{0};';

        var emptyCheck = function(value, meta) {
            meta.style = Ext.String.format(template, (value === "") ? "green" : "red");
            if (value === "")
                value = "不能为空";
            return value;
        };

        var change = function(value, meta) {
            meta.style = Ext.String.format(template, (value > 0) ? "green" : "red");
            return value;
        };

        var beforeEdit = function(editor, e) {
            if (e.field !== "DisplayName" && e.filed !== "Email" && e.filed !== "Status" &&
                e.field !== "Status")
                return false;
            return true;
        };

        var addRecord = function(grid) {
            var r = Ext.create({
                Status: "已验证"
            });
            grid.store.insert(0, r);
            form.getForm().reset();
        };
    </script>
}

    

@section menu
{
    @(
        X.GridPanel()
            .Title("隐患列表")
            .ID("ThreatGrid")
            .Frame(true)
            .Height(400)
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        Html.X().Button()
                            .Text("保存")
                            .Icon(Icon.Disk)
                            .DirectEvents(de =>
                            {
                                de.Click.Url = Url.Action("UpdateThreatCases");
                                de.Click.ExtraParams.Add(new Parameter
                                {
                                    Name = "data",
                                    Value = "this.up('grid').store.getChangedData()",
                                    Mode = ParameterMode.Raw,
                                    Encode = true
                                });
                            }),
                            
                        Html.X().Button()
                            .Text("增加")
                            .Icon(Icon.UserAdd)
                            .Handler("addRecord(App.ThreatGridStore);")
                            
                        )
                    )
            .Store(
                Html.X().Store()
                    .ID("ThreatGridStore")
                    .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("Read"))
                        .Reader(Html.X().JsonReader().Root("data"))
                    )
                    .RemoteSort(true)
                    .PageSize(15)
                    .Model(
                            Html.X().Model()
                                .IDProperty("ThreatCaseGrid")
                                .Fields(
                                    Html.X().ModelField().Name("ThreatCaseId"),
                                    Html.X().ModelField().Name("ProjectName"),
                                    Html.X().ModelField().Name("ThreatCaseLocation"),
                                    Html.X().ModelField().Name("ThreatCaseCategory"),
                                    Html.X().ModelField().Name("ThreatCaseType"),
                                    Html.X().ModelField().Name("ThreatCaseSeverity"),
                                    Html.X().ModelField().Name("ThreatCaseFoundTime").Type(ModelFieldType.Date),
                                    Html.X().ModelField().Name("ThreatCaseStatus")
                                )
                            )
                    )
                    
            .ColumnModel(
                Html.X().Column().DataIndex("ThreatCaseId").Text("Id").Hidden(true),
                Html.X().ComponentColumn().DataIndex("ProjectName").Text("工程项目")
                    .OverOnly(true).Editor(true).Component(Html.X().TextField()),
                Html.X().ComponentColumn().DataIndex("ThreatCaseLocation").Text("隐患地点")
                    .OverOnly(true).Editor(true).Component(Html.X().TextField()),
                    Html.X().ComponentColumn().DataIndex("ThreatCaseCategory").Text("隐患大类")
                    .OverOnly(true).Editor(true).Component(Html.X().TextField()),
                Html.X().ComponentColumn().DataIndex("ThreatCaseType").Text("隐患小类")
                    .OverOnly(true).Editor(true).Component(Html.X().TextField()),
                Html.X().DateColumn().DataIndex("ThreatCaseFoundTime").Text("隐患上报时间").Format("yyyy-MM-dd"),
                Html.X().DateColumn().DataIndex("LoginTime").Text("最近登录时间").Format("yyyy-MM-dd"),
                Html.X().Column().DataIndex("ThreatCaseStatus").Text("状态"))
                    
            .Plugins(
                    X.FilterHeader()
                )
                
            .BottomBar(
                Html.X().PagingToolbar()
                    .BeforePageText("页")
                    .AfterPageText("第{0}页")
                    .DisplayInfo(true)
                    .DisplayMsg("显示隐患预警 {0} - {1} 共 {2}")
                    .EmptyMsg("没有隐患预警"))
             .Listeners(l =>
                {
                    l.AfterRender.Handler = "this.filterHeader.fields[0].setIconCls('#Magnifier')";
                    l.AfterRender.Delay = 10;
                })
    )
}