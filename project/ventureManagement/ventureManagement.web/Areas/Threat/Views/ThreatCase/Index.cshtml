@using Ext.Net
@using Ext.Net.MVC

@{
    ViewBag.Title = "隐患预警管理";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();
}

@section headtag
{
    <script>
        var template = 'color:{0};';

        var emptyCheck = function(value, meta) {
            meta.style = Ext.String.format(template, (value === "") ? "green" : "red");
            if (value === "")
                value = "不能为空";
            return value;
        };

        var change = function(value, meta) {
            meta.style = Ext.String.format(template, (value > 0) ? "green" : "red");
            return value;
        };
    </script>
}

    

@section menu
{
    @(
        X.GridPanel()
            .Title("隐患列表")
            .ID("ThreatGrid")
            .Frame(true)
            .Height(400)
            .Store(
                Html.X().Store()
                    .ID("ThreatGridStore")
                    .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("Read"))
                        .Reader(
                            Html.X().JsonReader().Root("data"))
                    )
                    .RemoteSort(true)
                    .PageSize(15)
                    .Model(
                            Html.X().Model()
                                .IDProperty("ThreatCaseGrid")
                                .Fields(
                                    Html.X().ModelField().Name("ThreatCaseId"),
                                    Html.X().ModelField().Name("ThreatCaseLocation"),
                                    Html.X().ModelField().Name("ThreatCaseCategory"),
                                    Html.X().ModelField().Name("ThreatCaseType"),
                                    Html.X().ModelField().Name("ThreatCaseSeverity"),
                                    Html.X().ModelField().Name("ThreatCasePassibility"),
                                    Html.X().ModelField().Name("ThreatCaseRisk"),
                                    Html.X().ModelField().Name("ThreatCaseFoundTime").Type(ModelFieldType.Date),
                                    Html.X().ModelField().Name("ThreatCaseLimitTime").Type(ModelFieldType.Date),
                                    Html.X().ModelField().Name("ThreatCaseReportTime").Type(ModelFieldType.Date),
                                    Html.X().ModelField().Name("ThreatCaseLevel"),
                                    Html.X().ModelField().Name("ThreatCaseStatus")
                                )
                            )
                    )
                    
            .ColumnModel(
                Html.X().Column().DataIndex("ThreatCaseId").Text("Id").Hidden(true),                    
                Html.X().Column().DataIndex("ThreatCaseLocation").Text("隐患地点"),
                Html.X().Column().DataIndex("ThreatCaseCategory").Text("隐患大类"),
                Html.X().Column().DataIndex("ThreatCaseType").Text("隐患小类"),
                Html.X().Column().DataIndex("ThreatCaseSeverity").Text("隐患严重等级"),
                Html.X().Column().DataIndex("ThreatCasePassibility").Text("隐患可能性等级"),
                Html.X().Column().DataIndex("ThreatCaseRisk").Text("隐患风险指数"),
                Html.X().Column().DataIndex("ThreatCaseLevel").Text("隐患分级"),
                Html.X().DateColumn().DataIndex("ThreatCaseLimitTime").Text("整改期限").Format("yyyy-MM-dd"),
                Html.X().DateColumn().DataIndex("ThreatCaseFoundTime").Text("隐患发现时间").Format("yyyy-MM-dd"),
                Html.X().DateColumn().DataIndex("ThreatCaseReportTime").Text("隐患上报时间").Format("yyyy-MM-dd"),
                Html.X().Column().DataIndex("ThreatCaseStatus").Text("状态"))
                    
            .Plugins(
                    X.FilterHeader()
                )
                
            .BottomBar(
                Html.X().PagingToolbar()
                    .BeforePageText("页")
                    .AfterPageText("第{0}页")
                    .DisplayInfo(true)
                    .DisplayMsg("显示隐患预警 {0} - {1} 共 {2}")
                    .EmptyMsg("没有隐患预警"))
                    .Listeners(l =>
                       {
                           l.AfterRender.Handler = "this.filterHeader.fields[0].setIconCls('#Magnifier')";
                           l.AfterRender.Delay = 10;
                       })
            .SelectionModel(
                Html.X().RowSelectionModel()
                    .Mode(SelectionMode.Single)
                    .ID("GridSelector")
                    .Listeners(l =>
                    {
                        l.Select.Handler = "App.ThreatCaseDetail.getForm().loadRecord(record);App.ThreatCaseDetailWin.show(this);";
                    })
            )
    )

@*    @(
        X.Window()
            .ID("ThreatCaseDetailWin")
            .Width(1000)
            .Height(500)
            .Modal(true)
            .AutoRender(false)
            .AutoScroll(true)
            .Maximizable(true)
            .Hidden(true)
            .Items(
                Html.X().FormPanelFor(t=>t)
                    .ID("ThreatCaseDetail")
                    .Frame(true)
                    .Title("隐患详细信息")
                    .Width(400)
                    .DefaultAnchor("100%")
                    .FieldDefaults(d => {
                        d.LabelAlign = LabelAlign.Right;
                    }))
            .Listeners(ls=>ls.BeforeHide.Handler="App.GridSelector.clearSelections();")
    )*@
}